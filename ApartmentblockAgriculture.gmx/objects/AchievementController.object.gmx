<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
selected = 0;
draw_set_font(font0);

// Create ds_list
achievementlist = ds_list_create();
achievementsel = 0;
achievementremaining = GameState.ach_count;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy ds_list
ds_list_destroy(achievementlist);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Achievement Panel Controls
if ( instance_exists (obj_textbox) ) {
    if ( InputController.select ) {
        with ( obj_textbox ) {
            instance_destroy();
        }
        InputController.select = false;
    }
}
else if ( InputController.achbutton ) {
    if ( InputController.select ) {
        show_debug_message("Achievement Selected");
        InputController.select = false;
        var consumeonions = GameState.master_achievement_list[achievementlist[| selected], 2];
        var consumetomatoes = GameState.master_achievement_list[achievementlist[| selected], 3];
        var consumelettuces = GameState.master_achievement_list[achievementlist[| selected], 4];
        // Consume items and complete achievement
        repeat ( consumeonions ) {
            var onion = ds_list_find_index(InventoryController.inventorylist, 0);
            // Deleting
            ds_list_delete(InventoryController.inventorylist, onion);
        }
        repeat ( consumetomatoes ) { 
            var tomato = ds_list_find_index(InventoryController.inventorylist, 1);
            ds_list_delete(InventoryController.inventorylist, tomato);
        }
        repeat ( consumelettuces ) {
            var lettuce = ds_list_find_index(InventoryController.inventorylist, 2);
            ds_list_delete(InventoryController.inventorylist, lettuce);
        }
            
        show_debug_message('selected = ' + string(selected));
        show_debug_message('achievementlist[| selected] = ' + string(achievementlist[| selected]));
        show_debug_message('Achievement = ' + string(GameState.master_achievement_list[achievementlist[| selected], 1] ));
        achievementsel = achievementlist[| selected];
        // Set achievement to complete
        GameState.master_achievement_list[achievementlist[| selected], 5] = 1;               
        achievementremaining -= 1;
         
        event_user(0);
           
        if ( ds_list_size(InventoryController.inventorylist) == 0 || ds_list_size(achievementlist) == 0) {
            InputController.achbutton = false;
        }
            
        instance_create(view_wview / 2, view_hview / 2, obj_textbox);
    }
    else if ( InputController.up ) {
        InputController.up = false;
        selected -= 1;
        if ( selected &lt; 0 ) {
            selected = ds_list_size(achievementlist) - 1;
        }
        show_debug_message('selected moves to ' + string(selected));
    } else if ( InputController.down ) {
        InputController.down = false;
        selected += 1;
        if ( selected &gt;= ds_list_size(achievementlist) ) {
            selected = 0;
        }
        show_debug_message('selected moves to ' + string(selected));  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create list of things to make from inventory
var numOnions = 0;
var numTomatoes = 0;
var numLettuces = 0;
var targetOnions = 0;
var targetTomatoes = 0;
var targetLettuces = 0;
ds_list_clear(achievementlist);

if ( !ds_list_empty(InventoryController.inventorylist) ) {
    // Iterate through inventory &amp; count number of each item
    for ( i = 0; i &lt; ds_list_size(InventoryController.inventorylist); i++ ) {
        if ( InventoryController.inventorylist[| i] = 0 ) {
            numOnions += 1;            
        } else if ( InventoryController.inventorylist[| i] = 1 ) {
            numTomatoes += 1;
        } else if ( InventoryController.inventorylist[| i] = 2 ) {
            numLettuces += 1;
        }
    }   
}

// Iterate through master_achievement_list &amp; see whether contents of inventorylist meet criteria
for ( j = 0; j &lt;= GameState.ach_count; j++ ) {
    targetOnions = GameState.master_achievement_list[j, 2];
    targetTomatoes = GameState.master_achievement_list[j, 3];
    targetLettuces = GameState.master_achievement_list[j, 4];
    
    if ( numOnions &gt;= targetOnions &amp;&amp; numTomatoes &gt;= targetTomatoes &amp;&amp; numLettuces &gt;= targetLettuces &amp;&amp; GameState.master_achievement_list[j, 5] == 0 ) {
        // Update ds_list achievementlist
        ds_list_add(achievementlist, j);
    }
}

// Reset selector
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Achievement panel when tab pressed
if ( InputController.achbutton ) {
    // Draw rectangle
    var col1 = make_color_rgb(64, 64, 255);
    draw_set_color(col1);
    draw_roundrect(80, 15, view_wview - 20, 179, 0);
    var col2 = make_color_rgb(0, 0, 128);
    draw_set_color(col2);
    draw_roundrect(80, 15, view_wview - 20, 179, 1);
    draw_set_color(c_white);
    
    draw_set_font(font0);
    
    // Draw text of related achievements
    for ( i = 0; i &lt; ds_list_size(achievementlist); i++ ) {
        if ( i = selected ) {
            draw_set_alpha(1);
        } else {
            draw_set_alpha(0.5);
        }
        draw_text( 94, 25 + (24 * i), GameState.master_achievement_list[achievementlist[| i], 1] )
        
        // Draw icons
        iconn = 0;
        if ( GameState.master_achievement_list[achievementlist[| i], 2] &gt; 0 ) {
            draw_sprite_ext(spr_menu_onion, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
            iconn += 1;
            if ( GameState.master_achievement_list[achievementlist[| i], 2] &gt; 1 ) {
                draw_sprite_ext(spr_menu_onion, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
                iconn += 1;
                if ( GameState.master_achievement_list[achievementlist[| i], 2] &gt; 2 ) {
                    draw_sprite_ext(spr_menu_onion, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
                    iconn += 1;
                }
            }
        } 
        if ( GameState.master_achievement_list[achievementlist[| i], 3] &gt; 0 ) {
            draw_sprite_ext(spr_menu_tomato, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
            iconn += 1;
            if ( GameState.master_achievement_list[achievementlist[| i], 3] &gt; 1 ) {
                draw_sprite_ext(spr_menu_tomato, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
                iconn += 1;
                if ( GameState.master_achievement_list[achievementlist[| i], 3] &gt; 2 ) {
                    draw_sprite_ext(spr_menu_tomato, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
                    iconn += 1;
                }
            }
        }
        if ( GameState.master_achievement_list[achievementlist[| i], 4] &gt; 0 ) {
            draw_sprite_ext(spr_menu_lettuce, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
            iconn += 1;
            if ( GameState.master_achievement_list[achievementlist[| i], 4] &gt; 1 ) {
                draw_sprite_ext(spr_menu_lettuce, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
                iconn += 1;
                if ( GameState.master_achievement_list[achievementlist[| i], 4] &gt; 2 ) {
                    draw_sprite_ext(spr_menu_lettuce, 0, 400 + (20 * iconn), 36 + (24 * i), 0.75, 0.75, 0, image_blend, image_alpha);
                    iconn += 1;
                }
            }
        }
        
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
