<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
left = false;
right = false;
up = false;
down = false;
action = false;
menu = false;

menuButtonPressed = false;
menuButtonConfirmed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check controls
if ( GameState.control ) {
    if ( !GameState.isPaused ) {
        // If Menu isn't active
        if ( !GameState.isMenu ) {
            // Action
            if ( keyboard_check(ord("X")) ) {
                keyboard_clear(ord("X"));
                action = true;
            } else {
                action = false;
            }
            // Left
            if ( keyboard_check(vk_left) ) {
                left = true;
            } else { 
                left = false; 
            }
            // Right    
            if ( keyboard_check(vk_right) ) {
                right = true;
            } else {
                right = false;
            }
            // Up
            if ( keyboard_check(vk_up) ) {
                up = true;
            } else {
                up = false;
            }
            // Down
            if ( keyboard_check(vk_down) ) {
                down = true;
            } else {
                down = false;
            }
        }
        // Else if Menu is open
        else {
            if ( instance_exists(MenuController) ) {
                if (MenuController.left_rot != true &amp;&amp; MenuController.right_rot != true &amp;&amp;
                    MenuController.spiral != true &amp;&amp; MenuController.close != true ) {
                    // Menu handling
                    if ( keyboard_check (vk_left) ) {
                        MenuController.left_rot = true;
                        // Revert flags triggered by pressing 'Z' on an item but not yet confirming it
                        menuButtonPressed = false;
                        GameState.menuItemSelected = -1;
                    }
                    else if ( keyboard_check (vk_right) ) {
                        MenuController.right_rot = true;
                        // Revert flags triggered by pressing 'Z' on an item but not yet confirming it
                        menuButtonPressed = false;
                        GameState.menuItemSelected = -1;
                    }
                    else if ( keyboard_check (ord('X')) ) {
                        keyboard_clear(ord('X'));
                        // If item has already been selected, press again to confirm
                        if ( menuButtonPressed == true ) {
                            menuButtonConfirmed = true;
                            menuButtonPressed = false;
                            show_debug_message("Item '" + MenuController.item_array[MenuController.id_tag, 1] + "' has been confirmed.");
                        }
                        // Press button to select;
                        else {
                            menuButtonPressed = true;
                            with ( MenuController ) {
                                GameState.menuItemSelected = item_array[id_tag, 0];
                                show_debug_message("Item '" + item_array[id_tag, 1] + "' has been selected.");
                            }
                        }
                    }
                    /*else if ( keyboard_check (vk_add) ) {
                        keyboard_clear(vk_add);
                        MenuController.close = true;
                    }*/
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Controls
// Grow
if ( keyboard_check(ord("1")) ) {
    keyboard_clear(ord("1"));
    with ( obj_plantpot ) {
        if ( planted != -1 ) {
            if ( growthstage &lt; maxstage ) {
                growthstage += 1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
