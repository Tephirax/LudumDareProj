<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
movespeed = 1;
facing = 'down';
pot = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth correction
depth = y * -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle inputs
if ( InputController.action ) {
    InputController.action = false;
    // Refill watering can
    if ( (facing == 'up' &amp;&amp; place_meeting(x, y - 8, obj_bucket)) || (facing == 'left' &amp;&amp; place_meeting(x - 8, y, obj_bucket)) ) {
        show_debug_message('Watering can refilled.');
        // TODO: Play audio
        GameState.waterInCan = GameState.maxWater;
    }
    // If in front of pot...
    else if ( (facing == 'down' &amp;&amp; place_meeting(x, y + 8, obj_plantpot)) || (facing == 'left' &amp;&amp; place_meeting(x - 8, y, obj_plantpot)) 
           || (facing == 'up' &amp;&amp; place_meeting(x, y - 8, obj_plantpot)) || (facing == 'right' &amp;&amp; place_meeting(x + 8, y, obj_plantpot)) ) {
        if ( facing == 'down' ) { pot = instance_position(x, y + 8, obj_plantpot); }
        else if ( facing == 'left' ) { pot = instance_position(x - 24, y - 8, obj_plantpot); }
        else if ( facing == 'up' ) { pot = instance_position(x, y - 40, obj_plantpot); }
        else if ( facing == 'right' ) { pot = instance_position(x + 24, y - 8, obj_plantpot); }
        
        if ( instance_exists(pot) ) {
            // If pot is empty, start seed selection
            if ( pot.planted == -1 ) { 
                if ( !instance_exists(MenuController) ) {
                    show_debug_message('Seed selection started');
                    // Disable player animations;
                    image_speed = 0;
                    show_debug_message("Spawning MenuController");
                    instance_create(x, y, MenuController); // State st_menu is now run on MenuController 
                }
            } 
            // If pot is planted... 
            else {
                // If plant is at max growth, pick plant
                if ( pot.growthstage == pot.maxstage ) {
                    ds_list_insert(InventoryController.inventorylist, 0, pot.planted);
                    // If inventory is full, push first item out
                    var invsize = ds_list_size(InventoryController.inventorylist);
                    show_debug_message("invsize = " + string(invsize));
                    if ( invsize &gt; InventoryController.inventorymax ) {
                        ds_list_delete(InventoryController.inventorylist, invsize - 1);
                    }
                    // Remove plant from pot &amp; reset variables
                    with ( pot ) {
                        planted = -1;
                        watered = false;
                        withered = false;
                        witherdays = 0;
                        witherdaytarget = -1;
                    
                        growthdays = 0;
                        growthstage = 0;
                        maxstage = 4;
                        growthdaytarget = -1;
                    }
                }
                // Water pot (if watering can has enough water0
                else if ( GameState.waterInCan &gt; 0 ) {
                    show_debug_message('Pot watered');
                    // TODO: Play watering animation 
                    pot.watered = true;
                    GameState.waterInCan -= 1;
                
                    if ( pot.withered ) {
                        pot.withered = false;
                    }
                } else {
                    show_debug_message('Out of water');
                    // TODO: Play 'out of water' animation
                }
            }
        }        
    }
    // Use door to end day
    else if ( facing == 'up' &amp;&amp; place_meeting(x, y - 8, obj_door) ) {
        show_debug_message('End of day.');
        obj_door.endday = true;
    }
    // Otherwise, water whatever's in front of you
    else {
        show_debug_message('Water water everywhere');
        // TODO: Play watering animation in facing direction
        GameState.waterInCan -= 1;
    }    
}
else if ( InputController.left ) {
    facing = 'left';
    if ( !place_meeting(x - movespeed, y, par_solid) ) {
        x -= movespeed;
    }
}
else if ( InputController.right ) {
    facing = 'right';
    if ( !place_meeting(x + movespeed, y, par_solid) ) {
        x += movespeed;
    }
}
else if ( InputController.up ) {
    facing = 'up';
    if ( !place_meeting(x, y - movespeed, par_solid ) ) {
        y -= movespeed;
    }
}
else if ( InputController.down ) {
    facing = 'down';
    if ( !place_meeting(x, y + movespeed, par_solid) ) {
        y += movespeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle sprite facing
if ( facing = 'down' ) {
    sprite_index = spr_player_down;
}
else if ( facing = 'up' ) {
    sprite_index = spr_player_up;
}
else if ( facing = 'left' ) {
    sprite_index = spr_player_left;
}
else if ( facing = 'right' ) {
    sprite_index = spr_player_right;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Apply confirmed menu option to pot
if ( GameState.menuItemSelected != -1 &amp;&amp; !instance_exists(MenuController) ) {
    show_debug_message("GameState.menuItemSelected = " + string(GameState.menuItemSelected));
    pot.planted = GameState.menuItemSelected;
    GameState.menuItemSelected = -1;
    
    with ( pot ) {
        scr_assigngrowth();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
